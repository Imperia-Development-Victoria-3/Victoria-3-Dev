namespace = frankfurt_parliament
frankfurt_parliament.1 = {
	# For for the recipient of the Gutter Crown
	type = country_event
	placement = scope:frankfurt_location_scope
	title = frankfurt_parliament.1.t
	desc = frankfurt_parliament.1.d
	flavor = frankfurt_parliament.1.f
	icon = "gfx/interface/icons/event_icons/waving_flag.dds"
	event_image = {
		video = "unspecific_signed_contract"
	}
	duration = 3
	on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear"
	immediate = {
		p:x11C0A0.state = {
			save_scope_as = frankfurt_location_scope
		}
		# Set the 3 chosen countries as scopes
		random_country = {
			limit = {
				has_variable = first_candidate_german_leader
			}
			save_scope_as = first_candidate_scope
		}
		random_country = {
			limit = {
				has_variable = second_candidate_german_leader
			}
			save_scope_as = second_candidate_scope
		}
		random_country = {
			limit = {
				has_variable = third_candidate_german_leader
			}
			save_scope_as = third_candidate_scope
		}
	}
	option = {
		default_option = yes
		name = frankfurt_parliament.1.a
		change_global_variable = {
			name = frankfurt_has_voted_for_german_leader_1
			add = 1
		}
		ai_chance = {
			base = 100
			modifier = {
				trigger = {
					scope:first_candidate_scope = {
						any_primary_culture = {
							is_primary_culture_of = root
						}
					}
				}
				add = 100
			}
			modifier = {
				trigger = {
					scope:first_candidate_scope = {
						country_rank >= rank_value:great_power
					}
				}
				add = 100
			}
			modifier = {
				trigger = {
					scope:first_candidate_scope = {
						country_rank >= rank_value:major_power
					}
				}
				add = 100
			}
			modifier = {
				trigger = {
					scope:first_candidate_scope = {
						country_rank >= rank_value:minor_power
					}
				}
				add = 100
			}
		}
	}
	option = {
		name = frankfurt_parliament.1.b
		change_global_variable = {
			name = frankfurt_has_voted_for_german_leader_2
			add = 1
		}
		ai_chance = {
			base = 100
			modifier = {
				trigger = {
					scope:second_candidate_scope = {
						any_primary_culture = {
							is_primary_culture_of = root
						}
					}
				}
				add = 100
			}
			modifier = {
				trigger = {
					scope:second_candidate_scope = {
						country_rank >= rank_value:great_power
					}
				}
				add = 100
			}
			modifier = {
				trigger = {
					scope:second_candidate_scope = {
						country_rank >= rank_value:major_power
					}
				}
				add = 100
			}
			modifier = {
				trigger = {
					scope:second_candidate_scope = {
						country_rank >= rank_value:minor_power
					}
				}
				add = 100
			}
		}
	}
	option = {
		name = frankfurt_parliament.1.c
		change_global_variable = {
			name = frankfurt_has_voted_for_german_leader_3
			add = 1
		}
		ai_chance = {
			base = 100
			modifier = {
				trigger = {
					scope:third_candidate_scope = {
						any_primary_culture = {
							is_primary_culture_of = root
						}
					}
				}
				add = 100
			}
			modifier = {
				trigger = {
					scope:third_candidate_scope = {
						country_rank >= rank_value:great_power
					}
				}
				add = 100
			}
			modifier = {
				trigger = {
					scope:third_candidate_scope = {
						country_rank >= rank_value:major_power
					}
				}
				add = 100
			}
			modifier = {
				trigger = {
					scope:third_candidate_scope = {
						country_rank >= rank_value:minor_power
					}
				}
				add = 100
			}
		}
	}
	after = {
		change_global_variable = {
			name = frankfurt_has_voted_for_german_leader
			add = 1
		}
		if = {
			limit = {
				# If Everyone has voted
				global_var:frankfurt_eligible_german_leader_voters = global_var:frankfurt_has_voted_for_german_leader
			}
			if = {
				limit = {
					global_var:frankfurt_has_voted_for_german_leader_1 > global_var:frankfurt_has_voted_for_german_leader_2
					global_var:frankfurt_has_voted_for_german_leader_1 > global_var:frankfurt_has_voted_for_german_leader_3
				}
				scope:first_candidate_scope = {
					trigger_event = {
						id = frankfurt_parliament.2
						popup = yes
					}
				}
			}
			else_if = {
				limit = {
					global_var:frankfurt_has_voted_for_german_leader_2 > global_var:frankfurt_has_voted_for_german_leader_1
					global_var:frankfurt_has_voted_for_german_leader_2 > global_var:frankfurt_has_voted_for_german_leader_3
				}
				scope:second_candidate_scope = {
					trigger_event = {
						id = frankfurt_parliament.2
						popup = yes
					}
				}
			}
			else_if = {
				limit = {
					global_var:frankfurt_has_voted_for_german_leader_3 > global_var:frankfurt_has_voted_for_german_leader_1
					global_var:frankfurt_has_voted_for_german_leader_3 > global_var:frankfurt_has_voted_for_german_leader_2
				}
				scope:third_candidate_scope = {
					trigger_event = {
						id = frankfurt_parliament.2
						popup = yes
					}
				}
			}
			else = {
				# If this vote is tied, give it to the highest scored candidate, I guess
				if = {
					limit = {
						global_var:frankfurt_has_voted_for_german_leader_1 >= global_var:frankfurt_has_voted_for_german_leader_2
						global_var:frankfurt_has_voted_for_german_leader_1 >= global_var:frankfurt_has_voted_for_german_leader_3
					}
					scope:first_candidate_scope = {
						trigger_event = {
							id = frankfurt_parliament.2
							popup = yes
						}
					}
				}
				else_if = {
					limit = {
						global_var:frankfurt_has_voted_for_german_leader_2> = global_var:frankfurt_has_voted_for_german_leader_1
						global_var:frankfurt_has_voted_for_german_leader_2 >= global_var:frankfurt_has_voted_for_german_leader_3
					}
					scope:second_candidate_scope = {
						trigger_event = {
							id = frankfurt_parliament.2
							popup = yes
						}
					}
				}
				else_if = {
					limit = {
						global_var:frankfurt_has_voted_for_german_leader_3 >= global_var:frankfurt_has_voted_for_german_leader_1
						global_var:frankfurt_has_voted_for_german_leader_3 >= global_var:frankfurt_has_voted_for_german_leader_2
					}
					scope:third_candidate_scope = {
						trigger_event = {
							id = frankfurt_parliament.2
							popup = yes
						}
					}
				}
			}
		}
	}
}

frankfurt_parliament.2 = {
	# Gutter Crown is offered to a prominent German prince...
	type = country_event
	placement = scope:frankfurt_location_scope
	title = frankfurt_parliament.2.t
	desc = frankfurt_parliament.2.d
	flavor = frankfurt_parliament.2.f
	icon = "gfx/interface/icons/event_icons/waving_flag.dds"
	event_image = {
		video = "unspecific_signed_contract"
	}
	duration = 3
	on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear"
	immediate = {
		p:x11C0A0.state = {
			save_scope_as = frankfurt_location_scope
		}
	}
	option = {
		# Accept the Gutter Crown
		name = frankfurt_parliament.2.a
		set_variable = accepted_gutter_crown
		add_journal_entry = {
			type = je_imperia_frankfurt_german_consolidation_gutter_king
		}
		# If the Gutter king is a subject, make them independent. Just to be sure they get a proper ranking...
		if = {
			limit = {
				is_subject = yes
			}
			make_independent = yes
		}
		# Monarchy vs republic laws
		if = {
			limit = {
				frankfurt_parliament_has_majority_for_republic = yes
			}
			if = {
				limit = {
					OR = {
						frankfurt_parliament_has_majority_for_oligarchy = yes
						frankfurt_parliament_has_majority_for_presidential_republic = yes
					}
				}
				activate_law = law_type:law_presidential_republic
			}
			else_if = {
				limit = {
					OR = {
						frankfurt_parliament_has_majority_for_universal = yes
						frankfurt_parliament_has_majority_for_parliamentary_republic = yes
					}
				}
				activate_law = law_type:law_parliamentary_republic
			}
		}
		else = {
			activate_law = law_type:law_monarchy
		}
		# Voting laws
		if = {
			limit = {
				frankfurt_parliament_has_majority_for_oligarchy = yes
			}
			activate_law = law_type:law_oligarchy
		}
		else_if = {
			limit = {
				frankfurt_parliament_has_majority_for_wealth = yes
			}
			activate_law = law_type:law_wealth_voting
		}
		else_if = {
			limit = {
				frankfurt_parliament_has_majority_for_universal = yes
			}
			activate_law = law_type:law_universal_suffrage
		}
		custom_tooltip = frankfurt_parliament_add_german_claims_tt
		# Claims
		hidden_effect = {
			every_state_region = {
				limit = {
					frankfurt_parliament_state_is_gutter_german = yes
				}
				add_claim = root
			}
		}
		# foreign laws, only for liberal republican germany
		# Also adds infamy here
		if = {
			limit = {
				# Will only ever be true if it was voted for
				frankfurt_parliament_has_majority_for_internal_focus = yes
			}
			change_infamy = 40
			activate_law = law_type:law_armed_neutrality
		}
		else_if = {
			limit = {
				frankfurt_parliament_has_majority_for_external_focus = yes
			}
			change_infamy = 80
			activate_law = law_type:law_expansionism
		}
		else = {
			# Gives a base amount of infamy to anyone who accepts the Gutter Crown
			change_infamy = 40
		}
		# Subjugation demands
		custom_tooltip = frankfurt_parliament_german_minor_get_subjugation_demand_tt
		hidden_effect = {
			if = {
				limit = {
					frankfurt_parliament_has_majority_for_lesser_germany = yes
				}
				every_country = {
					limit = {
						this != root
						this != c:AUS
						this != c:SWI
						country_is_in_europe = yes
						OR = {
							country_has_primary_culture = cu:north_german
							country_has_primary_culture = cu:south_german
						}
						OR = {
							is_subject = no
							is_subject_type = subject_type_customs_union
						}
					}
					trigger_event = {
						# Subjugation demand
						id = frankfurt_parliament.3
						popup = yes
					}
				}
			}
			else_if = {
				limit = {
					frankfurt_parliament_has_majority_for_greater_germany = yes
				}
				every_country = {
					limit = {
						this != root
						this != SWI
						country_is_in_europe = yes
						OR = {
							country_has_primary_culture = cu:north_german
							country_has_primary_culture = cu:south_german
						}
						OR = {
							is_subject = no
							is_subject_type = subject_type_customs_union
						}
					}
					trigger_event = {
						# Subjugation demand
						id = frankfurt_parliament.3
						popup = yes
					}
				}
			}
			else_if = {
				limit = {
					frankfurt_parliament_has_majority_for_greater_austria = yes
				}
				every_country = {
					limit = {
						this != root
						country_is_in_europe = yes
						OR = {
							country_has_primary_culture = cu:north_german
							country_has_primary_culture = cu:south_german
							country_has_primary_culture = cu:alemannic
						}
						OR = {
							is_subject = no
							is_subject_type = subject_type_customs_union
						}
					}
					trigger_event = {
						# Subjugation demand
						id = frankfurt_parliament.3
						popup = yes
					}
				}
			}
		}
		ai_chance = {
			base = 0
			modifier = {
				trigger = {
					# The Frankfurt owner should accept the crown, but only if they're small.
					p:x11C0A0.owner = this
					country_rank <= rank_value:insignificant_power
				}
				add = 100
			}
		}
	}
	option = {
		# Decline
		default_option = yes
		name = frankfurt_parliament.2.b
		set_variable = declined_gutter_crown
		if = {
			# First re-offers to the great German Princes
			limit = {
				any_country = {
					NOT = {
						has_variable = declined_gutter_crown
					}
					OR = {
						has_variable = first_candidate_german_leader
						has_variable = second_candidate_german_leader
						has_variable = third_candidate_german_leader
					}
				}
			}
			random_country = {
				limit = {
					NOT = {
						has_variable = declined_gutter_crown
					}
					OR = {
						has_variable = first_candidate_german_leader
						has_variable = second_candidate_german_leader
						has_variable = third_candidate_german_leader
					}
				}
				trigger_event = {
					id = frankfurt_parliament.2
					popup = yes
				}
			}
		}
		else_if = {
			# Else it offers to the Frankfurt owner (Probably Frankfurt City?) if they havent declined already...
			limit = {
				any_country = {
					NOT = {
						has_variable = declined_gutter_crown
					}
					p:x11C0A0.owner = this
				}
			}
			p:x11C0A0.owner = {
				trigger_event = {
					id = frankfurt_parliament.2
					popup = yes
				}
			}
		}
		else_if = {
			# Else it offers to a non-declining German Country. Really desperate.
			limit = {
				any_country = {
					NOT = {
						has_variable = declined_gutter_crown
					}
					OR = {
						country_has_primary_culture = cu:north_german
						country_has_primary_culture = cu:south_german
					}
				}
			}
			random_country = {
				limit = {
					NOT = {
						has_variable = declined_gutter_crown
					}
					OR = {
						country_has_primary_culture = cu:north_german
						country_has_primary_culture = cu:south_german
					}
				}
				trigger_event = {
					id = frankfurt_parliament.2
					popup = yes
				}
			}
		}
		else = {
			every_country = {
				limit = {
					has_diplomatic_relevance = root
				}
				post_notification = nobody_wants_gutter_crown
			}
		}
		ai_chance = {
			base = 100
			modifier = {
				trigger = {
					# The Frankfurt owner should accept the crown, but only if they're small.
					p:x11C0A0.owner = this
					country_rank <= rank_value:insignificant_power
				}
				add = -100
			}
		}
	}
}

frankfurt_parliament.3 = {
	# Gutter King demands subjugation
	type = country_event
	placement = scope:gutter_king_scope.capital
	title = frankfurt_parliament.3.t
	desc = frankfurt_parliament.3.d
	flavor = frankfurt_parliament.3.f
	icon = "gfx/interface/icons/event_icons/waving_flag.dds"
	event_image = {
		video = "unspecific_signed_contract"
	}
	duration = 3
	on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear"
	trigger = {
		OR = {
			# To fire, must either have stayed in the conference OR be a great power
			NOT = {
				has_variable = left_frankfurt_parliament
			}
			country_rank >= rank_value:great_power
		}
	}
	immediate = {
		random_country = {
			limit = {
				has_variable = accepted_gutter_crown
			}
			save_scope_as = gutter_king_scope
		}
		if = {
			limit = {
				OR = {
					is_subject = yes
					is_subject_type = subject_type_customs_union
				}
			}
			overlord = {
				save_scope_as = overlord_scope
			}
			set_variable = {
				name = frankfurt_parliament_original_overlord
				value = scope:overlord_scope
			}
		}
		if = {
			limit = {
				country_rank >= rank_value:great_power
			}
			add_journal_entry = {
				type = je_imperia_frankfurt_german_consolidation_german_major
			}
		}
		else = {
			add_journal_entry = {
				type = je_imperia_frankfurt_german_consolidation_german_minor
			}
		}
	}
	option = {
		# accept
		default_option = yes
		name = frankfurt_parliament.3.a
		trigger = {
			# Only those who stayed can join at this point
			NOT = {
				has_variable = left_frankfurt_parliament
			}
		}
		if = {
			limit = {
				is_subject = yes
			}
		}
		scope:gutter_king_scope = {
			create_diplomatic_pact = {
				country = root
				type = dominion
			}
		}
		ai_chance = {
			base = 0
			modifier = {
				trigger = {
					scope:gutter_king_scope = {
						frankfurt_parliament_prince_will_join_gutter_king = yes
					}
				}
				add = 100
			}
		}
	}
	option = {
		# decline
		name = frankfurt_parliament.3.b
		ai_chance = {
			base = 100
			modifier = {
				trigger = {
					scope:gutter_king_scope = {
						frankfurt_parliament_prince_will_join_gutter_king = yes
					}
				}
				add = -100
			}
		}
	}
}

frankfurt_parliament.4 = {
	# Frankfurt Parliament Opening announcement
	type = country_event
	placement = scope:frankfurt_location_scope
	title = frankfurt_parliament.4.t
	desc = frankfurt_parliament.4.d
	flavor = frankfurt_parliament.4.f
	icon = "gfx/interface/icons/event_icons/waving_flag.dds"
	event_image = {
		video = "unspecific_signed_contract"
	}
	duration = 2
	on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear"
	immediate = {
		p:x11C0A0.state = {
			save_scope_as = frankfurt_location_scope
		}
	}
	option = {
		default_option = yes
		name = frankfurt_parliament.4.a
		custom_tooltip = frankfurt_we_can_now_vote_through_journal_tt
		custom_label = following_has_happened_tt
		show_as_tooltip = {
			add_journal_entry = {
				type = je_imperia_frankfurt_parliament
			}
		}
	}
}

frankfurt_parliament.5 = {
	# Gutter King asks for sway
	type = country_event
	placement = scope:gutter_king_scope.capital
	title = frankfurt_parliament.5.t
	desc = frankfurt_parliament.5.d
	flavor = frankfurt_parliament.5.f
	icon = "gfx/interface/icons/event_icons/waving_flag.dds"
	event_image = {
		video = "unspecific_signed_contract"
	}
	duration = 1
	on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear"
	immediate = {
		random_country = {
			limit = {
				has_variable = accepted_gutter_crown
			}
			save_scope_as = gutter_king_scope
		}
		set_variable = considering_frankfurt_sway_offer
	}
	option = {
		# Yes
		default_option = yes
		name = frankfurt_parliament.5.a
		scope:gutter_king_scope = {
			create_diplomatic_pact = {
				country = root
				type = dominion
			}
		}
		add_modifier = {
			name = gutter_king_prestige_positive
			months = 60
		}
		ai_chance = {
			base = 99
		}
	}
	option = {
		# No
		name = frankfurt_parliament.5.b
		ai_chance = {
			base = 1
		}
	}
	after = {
		remove_variable = considering_frankfurt_sway_offer
	}
}

frankfurt_parliament.6 = {
	# German Major asks for sway
	type = country_event
	placement = from.capital
	title = frankfurt_parliament.6.t
	desc = frankfurt_parliament.6.d
	flavor = frankfurt_parliament.6.f
	icon = "gfx/interface/icons/event_icons/waving_flag.dds"
	event_image = {
		video = "unspecific_signed_contract"
	}
	duration = 2
	on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear"
	immediate = {
		set_variable = considering_frankfurt_sway_offer
	}
	option = {
		# Yes
		default_option = yes
		name = frankfurt_parliament.6.a
		remove_modifier ?= gutter_king_prestige_positive
		add_modifier = {
			name = german_major_prestige_positive
			months = 60
		}
		make_independent = yes
		if = {
			limit = {
				has_variable = frankfurt_parliament_original_overlord
			}
			var:frankfurt_parliament_original_overlord = {
				create_diplomatic_pact = {
					country = root
					type = customs_union
				}
			}
		}
		from = {
			add_modifier = {
				name = german_major_prestige_negative
				months = 60
			}
		}
		ai_chance = {
			base = 99
		}
	}
	option = {
		# No
		name = frankfurt_parliament.6.b
		ai_chance = {
			base = 1
		}
	}
	after = {
		remove_variable = considering_frankfurt_sway_offer
	}
}
