imperia_frankfurt_parliament_clean_variables = {
	# Scope: any country in the world
	# Called from on_actions if certain conditions are met (basically if the thing is over)
	### ### ###
	# Vote variables
	remove_global_variable ?= frankfurt_parliament_voting_period
	remove_global_variable ?= frankfurt_parliament_current_vote
	remove_variable ?= frankfurt_parliament_voted_republic
	remove_variable ?= frankfurt_parliament_voted_monarchy
	remove_variable ?= frankfurt_parliament_voted_oligarchy
	remove_variable ?= frankfurt_parliament_voted_wealth_suffrage
	remove_variable ?= frankfurt_parliament_voted_universal_suffrage
	remove_variable ?= frankfurt_parliament_voted_presidential
	remove_variable ?= frankfurt_parliament_voted_parliamentary
	remove_variable ?= frankfurt_parliament_voted_lesser_germany
	remove_variable ?= frankfurt_parliament_voted_greater_germany
	remove_variable ?= frankfurt_parliament_voted_greater_austria
	# Global vote results
	remove_global_variable ?= frankfurt_parliament_has_majority_for_republic_var
	remove_global_variable ?= frankfurt_parliament_has_majority_for_monarchy_var
	remove_global_variable ?= frankfurt_parliament_has_majority_for_oligarchy_var
	remove_global_variable ?= frankfurt_parliament_has_majority_for_wealth_var
	remove_global_variable ?= frankfurt_parliament_has_majority_for_universal_var
	remove_global_variable ?= frankfurt_parliament_has_majority_for_presidential_republic_var
	remove_global_variable ?= frankfurt_parliament_has_majority_for_parliamentary_republic_var
	remove_global_variable ?= frankfurt_parliament_has_majority_for_lesser_germany_var
	remove_global_variable ?= frankfurt_parliament_has_majority_for_greater_germany_var
	remove_global_variable ?= frankfurt_parliament_has_majority_for_greater_austria_var
	remove_global_variable ?= frankfurt_parliament_has_majority_for_internal_focus_var
	remove_global_variable ?= frankfurt_parliament_has_majority_for_external_focus_var
	# Gutter king candidates
	remove_variable ?= first_candidate_german_leader
	remove_variable ?= second_candidate_german_leader
	remove_variable ?= third_candidate_german_leader
	# Gutter king voting
	remove_global_variable ?= frankfurt_has_voted_for_german_leader
	remove_global_variable ?= frankfurt_has_voted_for_german_leader_1
	remove_global_variable ?= frankfurt_has_voted_for_german_leader_2
	remove_global_variable ?= frankfurt_has_voted_for_german_leader_3
	# Gutter crown acceptance
	remove_variable ?= accepted_gutter_crown
	remove_variable ?= declined_gutter_crown
	# Gutter King consolidation
	remove_variable ?= je_imperia_frankfurt_german_consolidation_gutter_king_value
	remove_variable ?= je_imperia_frankfurt_german_consolidation_gutter_king_value_initialised
	remove_global_variable ?= frankfurt_parliament_gutter_king_is_consolidating_var
	# Gutter King old lawgroups
	remove_variable ?= gutter_king_old_lawgroup_governance_principles
	remove_variable ?= gutter_king_old_lawgroup_distribution_of_power
	remove_variable ?= gutter_king_old_lawgroup_diplomatic_stance
	# Gutter germany princes variables
	remove_variable ?= frankfurt_parliament_original_overlord
}

imperia_frankfurt_parliament_shatter_austria = {
	# Can be used anywhere, will scope to Austria anyways
	# Removes non-gutter-german states and makes them free
	if = {
		limit = {
			exists = c:AUS
		}
		c:AUS = {
			every_scope_state = {
				limit = {
					frankfurt_parliament_state_is_gutter_german = no
				}
				random_scope_pop = {
					limit = {
						prev.state_region = {
							is_homeland = prev.culture
						}
						culture = {
							NOR = {
								this = cu:north_german
								this = cu:south_german
							}
						}
						prev = {
							culture_percent_state = {
								target = prev.culture
								value >= 0.2
							}
						}
					}
					# Hungarian lands to Hungary
					if = {
						limit = {
							has_pop_culture = hungarian
						}
						if = {
							limit = {
								NOT = {
									exists = c:HUN
								}
							}
							create_country = {
								tag = HUN
								origin = c:AUS
								state = prev
							}
						}
						else = {
							prev = {
								set_state_owner = c:HUN
								set_state_type = incorporated
							}
						}
					}
					# North Italian lands to Venice
					if = {
						limit = {
							has_pop_culture = north_italian
						}
						if = {
							limit = {
								NOT = {
									exists = c:VEN
								}
							}
							create_country = {
								tag = VEN
								origin = c:AUS
								state = prev
							}
						}
						else = {
							prev = {
								set_state_owner = c:VEN
								set_state_type = incorporated
							}
						}
					}
					# Slovak to Slovakia
					if = {
						limit = {
							has_pop_culture = slovak
						}
						if = {
							limit = {
								NOT = {
									exists = c:SLV
								}
							}
							create_country = {
								tag = SLV
								origin = c:AUS
								state = prev
							}
						}
						else = {
							prev = {
								set_state_owner = c:SLV
								set_state_type = incorporated
							}
						}
					}
					# Polish and Ukrainian to Galicia-Lodomeria
					if = {
						limit = {
							OR = {
								has_pop_culture = polish
								has_pop_culture = ukrainian
							}
						}
						if = {
							limit = {
								NOT = {
									exists = c:GAL
								}
							}
							create_country = {
								tag = GAL
								origin = c:AUS
								state = prev
							}
						}
						else = {
							prev = {
								set_state_owner = c:GAL
								set_state_type = incorporated
							}
						}
					}
					# Slovenes to Slovenia
					if = {
						limit = {
							has_pop_culture = slovene
						}
						if = {
							limit = {
								NOT = {
									exists = c:SLO
								}
							}
							create_country = {
								tag = SLO
								origin = c:AUS
								state = prev
							}
						}
						else = {
							prev = {
								set_state_owner = c:SLO
								set_state_type = incorporated
							}
						}
					}
					# Romanians to Transylvania
					if = {
						limit = {
							has_pop_culture = romanian
						}
						if = {
							limit = {
								NOT = {
									exists = c:TRS
								}
							}
							create_country = {
								tag = TRS
								origin = c:AUS
								state = prev
							}
						}
						else = {
							prev = {
								set_state_owner = c:TRS
								set_state_type = incorporated
							}
						}
					}
					# Croatians to Croatia
					if = {
						limit = {
							has_pop_culture = croat
						}
						if = {
							limit = {
								NOT = {
									exists = c:CRO
								}
							}
							create_country = {
								tag = CRO
								origin = c:AUS
								state = prev
							}
						}
						else = {
							prev = {
								set_state_owner = c:CRO
								set_state_type = incorporated
							}
						}
					}
					# Bosnians to Bosnia
					if = {
						limit = {
							has_pop_culture = bosniak
						}
						if = {
							limit = {
								NOT = {
									exists = c:BOS
								}
							}
							create_country = {
								tag = BOS
								origin = c:AUS
								state = prev
							}
						}
						else = {
							prev = {
								set_state_owner = c:BOS
								set_state_type = incorporated
							}
						}
					}
					# Serbians to Serbia
					if = {
						limit = {
							has_pop_culture = serb
						}
						if = {
							limit = {
								NOT = {
									exists = c:SER
								}
							}
							create_country = {
								tag = SER
								origin = c:AUS
								state = prev
							}
						}
						else = {
							prev = {
								set_state_owner = c:SER
								set_state_type = incorporated
							}
						}
					}
					# Albanians to Albania
					if = {
						limit = {
							has_pop_culture = albanian
						}
						if = {
							limit = {
								NOT = {
									exists = c:ALB
								}
							}
							create_country = {
								tag = ALB
								origin = c:AUS
								state = prev
							}
						}
						else = {
							prev = {
								set_state_owner = c:ALB
								set_state_type = incorporated
							}
						}
					}
					# Bulgarians to Bulgaria
					if = {
						limit = {
							has_pop_culture = bulgarian
						}
						if = {
							limit = {
								NOT = {
									exists = c:BUL
								}
							}
							create_country = {
								tag = BUL
								origin = c:AUS
								state = prev
							}
						}
						else = {
							prev = {
								set_state_owner = c:BUL
								set_state_type = incorporated
							}
						}
					}
					# Greeks to Greece
					if = {
						limit = {
							has_pop_culture = greek
						}
						if = {
							limit = {
								NOT = {
									exists = c:GRE
								}
							}
							create_country = {
								tag = GRE
								origin = c:AUS
								state = prev
							}
						}
						else = {
							prev = {
								set_state_owner = c:GRE
								set_state_type = incorporated
							}
						}
					}
					# Turks to Turkey (or probably the Ottomans, although who knows if it gets this far)
					if = {
						limit = {
							has_pop_culture = turkish
						}
						if = {
							limit = {
								NOT = {
									exists = c:TUR
								}
							}
							create_country = {
								tag = TUR
								origin = c:AUS
								state = prev
							}
						}
						else = {
							prev = {
								set_state_owner = c:TUR
								set_state_type = incorporated
							}
						}
					}
				}
			}
		}
	}
}

imperia_frankfurt_parliament_dissolve_gutter_germany = {
	# Scope : gutter king
	custom_tooltip = {
		text = frankfurt_return_to_old_status_tt
		every_subject_or_below = {
			limit = {
				is_direct_subject_of = root
			}
			remove_modifier ?= gutter_king_solid_sway
			remove_modifier ?= gutter_king_complete_sway
			make_independent = yes
			if = {
				limit = {
					has_variable = frankfurt_parliament_original_overlord
				}
				var:frankfurt_parliament_original_overlord = {
					create_diplomatic_pact = {
						country = prev
						type = customs_union
					}
				}
			}
		}
	}
	if = {
		limit = {
			exists = var:gutter_king_old_lawgroup_governance_principles
			NOT = {
				has_law = var:gutter_king_old_lawgroup_governance_principles
			}
		}
		activate_law = var:gutter_king_old_lawgroup_governance_principles
	}
	if = {
		limit = {
			exists = var:gutter_king_old_lawgroup_distribution_of_power
			NOT = {
				has_law = var:gutter_king_old_lawgroup_distribution_of_power
			}
		}
		activate_law = var:gutter_king_old_lawgroup_distribution_of_power
	}
	if = {
		limit = {
			exists = var:gutter_king_old_lawgroup_diplomatic_stance
			NOT = {
				has_law = var:gutter_king_old_lawgroup_diplomatic_stance
			}
		}
		activate_law = var:gutter_king_old_lawgroup_diplomatic_stance
	}
}

imperia_frankfurt_parliament_spawn_rhineland = {
	custom_tooltip = {
		text = imperia_frankfurt_parliament_spawn_rhineland_tt
		every_state = {
			limit = {
				owner = {
					OR = {
						has_variable = accepted_gutter_crown
						has_variable = gutter_germany
						any_overlord_or_above = {
							OR = {
								has_variable = accepted_gutter_crown
								has_variable = gutter_germany
							}
						}
					}
				}
				OR = {
					state_region = s:STATE_RHINELAND
					state_region = s:STATE_NORTH_RHINE
					state_region = s:STATE_RUHR
					state_region = s:STATE_WESTPHALIA
					state_region = s:STATE_HESSE
				}
			}
			add_to_local_variable_list = {
				name = rhine_states
				target = this
			}
			owner = {
				if = {
					limit = {
						NOT = {
							is_target_in_local_variable_list = {
								name = rhine_owners
								target = this
							}
						}
					}
					add_to_local_variable_list = {
						name = rhine_owners
						target = this
					}
				}
			}
		}
		ordered_in_local_list = {
			variable = rhine_owners
			limit = {
				capital = {
					is_target_in_local_variable_list = {
						name = rhine_states
						target = this
					}
				}
			}
			order_by = gdp
			position = 0
			save_scope_as = rhineland_originator
		}
		if = {
			limit = {
				exists = scope:rhineland_originator
			}
			scope:rhineland_originator = {
				change_tag = RHE
			}
		}
		every_in_local_list = {
			variable = rhine_states
			set_state_owner = c:RHE
		}
	}
}

imperia_frankfurt_parliament_spawn_south_german_federation = {
	custom_tooltip = {
		text = imperia_frankfurt_parliament_spawn_south_german_federation_tt
		every_state = {
			limit = {
				owner = {
					OR = {
						has_variable = accepted_gutter_crown
						has_variable = gutter_germany
						any_overlord_or_above = {
							OR = {
								has_variable = accepted_gutter_crown
								has_variable = gutter_germany
							}
						}
					}
				}
				state_region = {
					is_homeland = cu:south_german
				}
			}
			add_to_local_variable_list = {
				name = south_german_states
				target = this
			}
			owner = {
				if = {
					limit = {
						NOT = {
							is_target_in_local_variable_list = {
								name = south_german_owners
								target = this
							}
						}
					}
					add_to_local_variable_list = {
						name = south_german_owners
						target = this
					}
				}
			}
		}
		ordered_in_local_list = {
			variable = south_german_owners
			limit = {
				capital = {
					is_target_in_local_variable_list = {
						name = south_german_states
						target = this
					}
				}
			}
			order_by = gdp
			position = 0
			save_scope_as = south_german_originator
		}
		if = {
			limit = {
				exists = scope:south_german_originator
			}
			scope:south_german_originator = {
				change_tag = SGF
			}
		}
		every_in_local_list = {
			variable = south_german_states
			set_state_owner = c:SGF
		}
	}
}
