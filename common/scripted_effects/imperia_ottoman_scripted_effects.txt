# Dead Man of Europe - Inspired by Divided Monarchists
# Made by Fallonar
# Refer to comments here and in 02_french_monarchism to get an idea as to how this works.
tur_set_dead_man_variables = {
	# Republican Variables
	set_variable = {
		name = republican_progress
		value = 20
	}
	#Master progress variable. This is incremented by the other variables, and corresponds to the progress bar if the republicans are in the lead.
	set_variable = {
		name = republican_progress_from_characters
		value = 0
	}
	#Progress-from-character component. This updates with the combined popularities of every republican character later on, and is used to calculate republican_progress_next.
	set_variable = {
		name = republican_progress_from_igs
		value = 0
	}
	#Progress-from-IG component. This updates with the combined clout of every republican IG later on, and is used to calculate republican_progress_next.
	set_variable = {
		name = republican_progress_from_laws
		value = 0
	}
	#Progress from laws component. Each law that fits gives a corresponding value
	set_variable = {
		name = republican_progress_from_legitimacy
		value = 0
	}
	#Progress-from-legitimacy component. This updates with the current government legitimacy, and is also used to calculate republican_progress_next.
	set_variable = {
		name = republican_progress_from_effects
		value = 0
	}
	#Final element in republican_progress_next. This is defined by various effects, and is based solely on scripted effects. This is how designers can manually grant ticking bonuses or maluses to this mechanic.
	set_variable = {
		name = republican_progress_next
		value = 0
	}
	#This variable is an incrementor - it is calculated by the previous five variables on a weekly basis, and is added to republican_progress on the monthly. This is used in localisation to tell the player what the current rate of change for republican_progress is.
	#Theocracy Variables
	set_variable = {
		name = theocracy_progress
		value = 20
	}
	set_variable = {
		name = theocracy_progress_from_characters
		value = 0
	}
	set_variable = {
		name = theocracy_progress_from_igs
		value = 0
	}
	set_variable = {
		name = theocracy_progress_from_laws
		value = 0
	}
	set_variable = {
		name = theocracy_progress_from_legitimacy
		value = 0
	}
	set_variable = {
		name = theocracy_progress_from_effects
		value = 0
	}
	set_variable = {
		name = theocracy_progress_next
		value = 0
	}
	# Communist Variables
	set_variable = {
		name = communist_progress
		value = 10
	}
	set_variable = {
		name = communist_progress_from_characters
		value = 0
	}
	set_variable = {
		name = communist_progress_from_igs
		value = 0
	}
	set_variable = {
		name = communist_progress_from_laws
		value = 0
	}
	set_variable = {
		name = communist_progress_from_legitimacy
		value = 0
	}
	set_variable = {
		name = communist_progress_from_effects
		value = 0
	}
	set_variable = {
		name = communist_progress_next
		value = 0
	}
	set_variable = {
		name = ig_weight
		value = 0
	}
	#This variable is used solely for mathematical purposes, and is set as equivalent to the clout of a given interest group. It exists so that IGs can be weighted higher or lower depending on whether they're in-government or not.
}

tur_weekly_pulse_republican_progress = {
	#Effects like these are run three times, one for each house. All of them function essentially the same way.
	set_variable = {
		name = republican_progress_from_characters
		value = 0
	}
	#All of these variables are ephemeral and should never be manually set to anything.
	set_variable = {
		name = republican_progress_from_igs
		value = 0
	}
	set_variable = {
		name = republican_progress_from_legitimacy
		value = root.government_legitimacy
	}
	#Government legitimacy is a single constant, and so this variable is set immediately rather than needing a calculation.
	set_variable = {
		name = republican_progress_from_laws
		value = imperia_dead_man_republican_laws_value
	}
	# The laws calculation is handled over in a scripted_value, so this can be set immediately
	set_variable = {
		name = republican_progress_next
		value = 0
	}
	# From Characters
	every_scope_character = {
		limit = {
			is_republican_supporter = yes
		}
		ROOT = {
			change_variable = {
				name = republican_progress_from_characters
				add = prev.popularity
			}
			#for_each loop. For each character of ideology_republican, add that character's popularity to republican_progress_from_characters.
		}
	}
	change_variable = {
		name = republican_progress_from_characters
		divide = 100
	}
	#Character popularities are -100/100, rather than our desired -1/1, so divide by 100.
	# From Interest Groups
	every_interest_group = {
		limit = {
			OR = {
				leader = {
					is_republican_supporter = yes
				}
				AND = {
					is_interest_group_type = ig_intelligentsia
					leader = {
						NOR = {
							has_ideology = ideology:ideology_communist
							has_ideology = ideology:ideology_anarchist
							has_ideology = ideology:ideology_social_democrat
							has_ideology = ideology:ideology_humanitarian
						}
					}
				}
			}
		}
		ROOT = {
			#for_each loop. For each interest group of ideology_republican, perform the following steps in sequence.
			set_variable = {
				name = ig_weight
				value = prev.ig_clout
			}
			#1. Set ig_weight as equal to the interest group's clout.
		}
		if = {
			limit = {
				is_in_government = yes
			}
			ROOT = {
				change_variable = {
					name = ig_weight
					multiply = 3
				}
				#2. If that IG is in government, multiply ig_weight by a given value.
			}
		}
		ROOT = {
			change_variable = {
				name = republican_progress_from_igs
				add = var:ig_weight
			}
			#3. Add ig_weight to the central republican_progress_from_igs variable. This will run until there are no more republican IGs.
		}
	}
	# From Legitimacy
	change_variable = {
		name = republican_progress_from_legitimacy
		divide = 100
	}
	#Legitimacy divided by 100, to make it minimum 0 and maximum 1.
	change_variable = {
		name = republican_progress_from_legitimacy
		subtract = 0.5
	}
	#Legitimacy subtracted by 0.5, to make it minimum -0.5 and maximum 0.5. Balanced scale of negative to absolute value.
	if = {
		limit = {
			NOT = {
				ruler_is_republican = yes				#If the ruler is republican, then the republicans benefit from high legitimacy and suffer from low legitimacy.
			}
		}
		change_variable = {
			name = republican_progress_from_legitimacy
			multiply = -0.5
		}
		#If the ruler is not republican, they benefit from low legitimacy and suffer from high legitimacy.
	}
	# Final Compilation
	change_variable = {
		name = republican_progress_next
		add = var:republican_progress_from_characters
	}
	#All sub-variables are added to republican_progress_next here. At this point, all of the component variables are calculated properly, and converted to a decimal scale.
	change_variable = {
		name = republican_progress_next
		add = var:republican_progress_from_igs
	}
	change_variable = {
		name = republican_progress_next
		add = var:republican_progress_from_legitimacy
	}
	change_variable = {
		name = republican_progress_next
		add = var:republican_progress_from_laws
	}
	# And then just insert the laws calc down here
	change_variable = {
		name = republican_progress_next
		add = var:republican_progress_from_effects
	}
}

tur_weekly_pulse_theocracy_progress = {
	#See republican progress to see how this works.
	set_variable = {
		name = theocracy_progress_from_characters
		value = 0
	}
	set_variable = {
		name = theocracy_progress_from_igs
		value = 0
	}
	set_variable = {
		name = theocracy_progress_from_laws
		value = imperia_dead_man_theocracy_laws_value
	}
	set_variable = {
		name = theocracy_progress_from_legitimacy
		value = root.government_legitimacy
	}
	set_variable = {
		name = theocracy_progress_next
		value = 0
	}
	# From Characters
	every_scope_character = {
		limit = {
			is_theocracy_supporter = yes
		}
		ROOT = {
			change_variable = {
				name = theocracy_progress_from_characters
				add = prev.popularity
			}
		}
	}
	change_variable = {
		name = theocracy_progress_from_characters
		divide = 100
	}
	# From Interest Groups
	every_interest_group = {
		limit = {
			OR = {
				leader = {
					is_theocracy_supporter = yes
				}
				AND = {
					is_interest_group_type = ig_devout
					leader = {
						NOR = {
							has_ideology = ideology:ideology_atheist							#nihilist
							has_ideology = ideology:ideology_social_democrat
							has_ideology = ideology:ideology_humanitarian
						}
					}
				}
			}
		}
		ROOT = {
			set_variable = {
				name = ig_weight
				value = prev.ig_clout
			}
		}
		if = {
			limit = {
				is_in_government = yes
			}
			ROOT = {
				change_variable = {
					name = ig_weight
					multiply = 3
				}
			}
		}
		ROOT = {
			change_variable = {
				name = theocracy_progress_from_igs
				add = var:ig_weight
			}
		}
	}
	# From Legitimacy
	change_variable = {
		name = theocracy_progress_from_legitimacy
		divide = 100
	}
	change_variable = {
		name = theocracy_progress_from_legitimacy
		subtract = 0.5
	}
	if = {
		limit = {
			NOT = {
				ruler_is_theocrat = yes
			}
		}
		change_variable = {
			name = theocracy_progress_from_legitimacy
			multiply = -0.5
		}
	}
	# Final Compilation
	change_variable = {
		name = theocracy_progress_next
		add = var:theocracy_progress_from_characters
	}
	change_variable = {
		name = theocracy_progress_next
		add = var:theocracy_progress_from_igs
	}
	change_variable = {
		name = theocracy_progress_next
		add = var:theocracy_progress_from_laws
	}
	change_variable = {
		name = theocracy_progress_next
		add = var:theocracy_progress_from_legitimacy
	}
	change_variable = {
		name = theocracy_progress_next
		add = var:theocracy_progress_from_effects
	}
}

tur_weekly_pulse_communist_progress = {
	#See communist progress to see how this works.
	set_variable = {
		name = communist_progress_from_characters
		value = 0
	}
	set_variable = {
		name = communist_progress_from_igs
		value = 0
	}
	set_variable = {
		name = communist_progress_from_laws
		value = imperia_dead_man_communist_laws_value
	}
	set_variable = {
		name = communist_progress_from_legitimacy
		value = root.government_legitimacy
	}
	set_variable = {
		name = communist_progress_next
		value = 0
	}
	# From Characters
	every_scope_character = {
		limit = {
			is_communist_supporter = yes
		}
		ROOT = {
			change_variable = {
				name = communist_progress_from_characters
				add = prev.popularity
			}
		}
	}
	change_variable = {
		name = communist_progress_from_characters
		divide = 100
	}
	# From Interest Groups
	every_interest_group = {
		limit = {
			OR = {
				leader = {
					is_communist_supporter = yes
				}
				AND = {
					is_interest_group_type = ig_trade_unions
					leader = {
						NOR = {
							has_ideology = ideology:ideology_atheist							#nihilist
							has_ideology = ideology:ideology_radical
							has_ideology = ideology:ideology_republican_leader
							has_ideology = ideology:ideology_liberal_leader							#democrat
						}
					}
				}
			}
		}
		ROOT = {
			set_variable = {
				name = ig_weight
				value = prev.ig_clout
			}
		}
		if = {
			limit = {
				is_in_government = yes
			}
			ROOT = {
				change_variable = {
					name = ig_weight
					multiply = 3
				}
			}
		}
		ROOT = {
			change_variable = {
				name = communist_progress_from_igs
				add = var:ig_weight
			}
		}
	}
	# From Legitimacy
	change_variable = {
		name = communist_progress_from_legitimacy
		divide = 100
	}
	change_variable = {
		name = communist_progress_from_legitimacy
		subtract = 0.5
	}
	if = {
		limit = {
			NOT = {
				ruler_is_communist = yes
			}
		}
		change_variable = {
			name = communist_progress_from_legitimacy
			multiply = -0.5
		}
	}
	# Final Compilation
	change_variable = {
		name = communist_progress_next
		add = var:communist_progress_from_characters
	}
	change_variable = {
		name = communist_progress_next
		add = var:communist_progress_from_igs
	}
	change_variable = {
		name = communist_progress_next
		add = var:communist_progress_from_laws
	}
	change_variable = {
		name = communist_progress_next
		add = var:communist_progress_from_legitimacy
	}
	change_variable = {
		name = communist_progress_next
		add = var:communist_progress_from_effects
	}
}

tur_clear_dead_man_variables = {
	#Clears all variables, to save memory/performance. Should be executed by anything that makes Dead Man irrelevant.
	remove_variable = republican_progress
	remove_variable = republican_progress_from_characters
	remove_variable = republican_progress_from_igs
	remove_variable = republican_progress_from_laws
	remove_variable = republican_progress_from_legitimacy
	remove_variable = republican_progress_from_effects
	remove_variable = republican_progress_next
	remove_variable = republican_progress
	remove_variable = theocracy_progress_from_characters
	remove_variable = theocracy_progress_from_igs
	remove_variable = theocracy_progress_from_laws
	remove_variable = theocracy_progress_from_legitimacy
	remove_variable = theocracy_progress_from_effects
	remove_variable = theocracy_progress_next
	remove_variable = communist_progress
	remove_variable = communist_progress_from_characters
	remove_variable = communist_progress_from_igs
	remove_variable = communist_progress_from_laws
	remove_variable = communist_progress_from_legitimacy
	remove_variable = communist_progress_from_effects
	remove_variable = communist_progress_next
	remove_variable = ig_weight
	remove_variable = dead_man_pulse_uni
	remove_variable = dead_man_pulse_mil
	remove_variable = dead_man_pulse_balk
	remove_variable = dead_man_pulse_turk
	remove_variable = dead_man_pulse_kurd
	remove_variable = dead_man_pulse_egypt
	remove_variable = dead_man_pulse_pogrom
	remove_variable = dead_man_pulse_fem
	remove_variable = dead_man_pulse_sultan
	remove_variable = dead_man_pulse_manifesto
	remove_variable = dead_man_pulse_republican
	remove_variable = dead_man_pulse_imam
}

tur_leading_government = {
	#This scripted effect determines which dynasty is the most powerful one, and sets tur_leading_government_progress to be equal to that dynasty's progress variable. This allows the bar to work, and much easier calculation to take place.
	if = {
		limit = {
			dead_man_republicans_winning = yes
		}
		set_variable = {
			name = tur_leading_government_progress
			value = var:republican_progress
		}
	}
	else_if = {
		limit = {
			dead_man_theocrats_winning = yes
		}
		set_variable = {
			name = tur_leading_government_progress
			value = var:theocracy_progress
		}
	}
	else_if = {
		limit = {
			dead_man_communists_winning = yes
		}
		set_variable = {
			name = tur_leading_government_progress
			value = var:communist_progress
		}
	}
	clamp_variable = {
		name = tur_leading_government_progress
		max = 480
		min = 0
	}
	#These variables cannot exceed 480 or 0, to prevent bad and ugly displays.
}

###############################
#### BALKAN DISINTEGRATION ####
###############################
imperia_balkan_disintegrate = {
	# Can be used anywhere, will scope to Turkey anyways
	if = {
		limit = {
			exists = C:TUR
		}
		custom_tooltip = {
			text = imperia_balkan_disintegrate_tt
			C:TUR = {
				every_scope_state = {
					limit = {
						OR = {
							region = sr:region_balkans
							region = sr:region_danubia
						}
					}
					random_scope_pop = {
						limit = {
							prev.state_region = {
								is_homeland = prev.culture
							}
							culture = {
								NOT = {
									this = cu:turkish
								}
							}
							prev = {
								culture_percent_state = {
									target = prev.culture
									value >= 0.2
								}
							}
						}
						# Hungarian lands to Hungary
						if = {
							limit = {
								has_pop_culture = hungarian
							}
							if = {
								limit = {
									NOT = {
										exists = c:HUN
									}
								}
								create_country = {
									tag = HUN
									origin = C:TUR
									state = prev
								}
							}
							else = {
								prev = {
									set_state_owner = c:HUN
									set_state_type = incorporated
								}
							}
						}
						# Slovak to Slovakia
						if = {
							limit = {
								has_pop_culture = slovak
							}
							if = {
								limit = {
									NOT = {
										exists = c:SLV
									}
								}
								create_country = {
									tag = SLV
									origin = C:TUR
									state = prev
								}
							}
							else = {
								prev = {
									set_state_owner = c:SLV
									set_state_type = incorporated
								}
							}
						}
						# Polish and Ukrainian to Galicia-Lodomeria
						if = {
							limit = {
								OR = {
									has_pop_culture = polish
									has_pop_culture = ukrainian
								}
							}
							if = {
								limit = {
									NOT = {
										exists = c:GAL
									}
								}
								create_country = {
									tag = GAL
									origin = C:TUR
									state = prev
								}
							}
							else = {
								prev = {
									set_state_owner = c:GAL
									set_state_type = incorporated
								}
							}
						}
						# Slovenes to Slovenia
						if = {
							limit = {
								has_pop_culture = slovene
							}
							if = {
								limit = {
									NOT = {
										exists = c:SLO
									}
								}
								create_country = {
									tag = SLO
									origin = C:TUR
									state = prev
								}
							}
							else = {
								prev = {
									set_state_owner = c:SLO
									set_state_type = incorporated
								}
							}
						}
						# Romanians to Wallachia
						if = {
							limit = {
								has_pop_culture = romanian
							}
							if = {
								limit = {
									NOT = {
										exists = c:WAL
									}
								}
								create_country = {
									tag = WAL
									origin = C:TUR
									state = prev
								}
							}
							else = {
								prev = {
									set_state_owner = c:WAL
									set_state_type = incorporated
								}
							}
						}
						# Croatians to Croatia
						if = {
							limit = {
								has_pop_culture = croat
							}
							if = {
								limit = {
									NOT = {
										exists = c:CRO
									}
								}
								create_country = {
									tag = CRO
									origin = C:TUR
									state = prev
								}
							}
							else = {
								prev = {
									set_state_owner = c:CRO
									set_state_type = incorporated
								}
							}
						}
						# Bosnians to Bosnia
						if = {
							limit = {
								has_pop_culture = bosniak
							}
							if = {
								limit = {
									NOT = {
										exists = c:BOS
									}
								}
								create_country = {
									tag = BOS
									origin = C:TUR
									state = prev
								}
							}
							else = {
								prev = {
									set_state_owner = c:BOS
									set_state_type = incorporated
								}
							}
						}
						# Serbians to Serbia
						if = {
							limit = {
								has_pop_culture = serb
							}
							if = {
								limit = {
									NOT = {
										exists = c:SER
									}
								}
								create_country = {
									tag = SER
									origin = C:TUR
									state = prev
								}
							}
							else = {
								prev = {
									set_state_owner = c:SER
									set_state_type = incorporated
								}
							}
						}
						# Albanians to Albania
						if = {
							limit = {
								has_pop_culture = albanian
							}
							if = {
								limit = {
									NOT = {
										exists = c:ALB
									}
								}
								create_country = {
									tag = ALB
									origin = C:TUR
									state = prev
								}
							}
							else = {
								prev = {
									set_state_owner = c:ALB
									set_state_type = incorporated
								}
							}
						}
						# Bulgarians to Bulgaria
						if = {
							limit = {
								has_pop_culture = bulgarian
							}
							if = {
								limit = {
									NOT = {
										exists = c:BUL
									}
								}
								create_country = {
									tag = BUL
									origin = C:TUR
									state = prev
								}
							}
							else = {
								prev = {
									set_state_owner = c:BUL
									set_state_type = incorporated
								}
							}
						}
						# Greeks to Greece
						if = {
							limit = {
								has_pop_culture = greek
							}
							if = {
								limit = {
									NOT = {
										exists = c:GRE
									}
								}
								create_country = {
									tag = GRE
									origin = C:TUR
									state = prev
								}
							}
							else = {
								prev = {
									set_state_owner = c:GRE
									set_state_type = incorporated
								}
							}
						}
					}
				}
			}
		}
	}
}

imperia_balkan_disintegrate_partial = {
	# Can be used anywhere, will scope to Turkey anyways
	if = {
		limit = {
			exists = C:TUR
		}
		custom_tooltip = {
			text = imperia_balkan_disintegrate_partial_tt
			C:TUR = {
				every_scope_state = {
					limit = {
						OR = {
							region = sr:region_balkans
							region = sr:region_danubia
						}
						NOR = {
							state_region = s:STATE_WESTERN_THRACE
							state_region = s:STATE_NORTHERN_THRACE
							state_region = s:STATE_EASTERN_THRACE
							culture_percent_state = {
								target = cu:turkish
								value >= 0.4
							}
						}
					}
					save_scope_value_as = {
						name = largest_culture_percentage
						value = biggest_culture_percentage_in_state
					}
					random_scope_pop = {
						limit = {
							prev.state_region = {
								is_homeland = prev.culture
							}
							culture = {
								NOT = {
									this = cu:turkish
								}
							}
							prev = {
								culture_percent_state = {
									target = prev.culture
									value >= scope:largest_culture_percentage
								}
							}
						}
						# Hungarian lands to Hungary
						if = {
							limit = {
								has_pop_culture = hungarian
							}
							if = {
								limit = {
									NOT = {
										exists = c:HUN
									}
								}
								create_country = {
									tag = HUN
									origin = C:TUR
									state = prev
								}
							}
							else = {
								prev = {
									set_state_owner = c:HUN
									set_state_type = incorporated
								}
							}
						}
						# Slovak to Slovakia
						if = {
							limit = {
								has_pop_culture = slovak
							}
							if = {
								limit = {
									NOT = {
										exists = c:SLV
									}
								}
								create_country = {
									tag = SLV
									origin = C:TUR
									state = prev
								}
							}
							else = {
								prev = {
									set_state_owner = c:SLV
									set_state_type = incorporated
								}
							}
						}
						# Polish and Ukrainian to Galicia-Lodomeria
						if = {
							limit = {
								OR = {
									has_pop_culture = polish
									has_pop_culture = ukrainian
								}
							}
							if = {
								limit = {
									NOT = {
										exists = c:GAL
									}
								}
								create_country = {
									tag = GAL
									origin = C:TUR
									state = prev
								}
							}
							else = {
								prev = {
									set_state_owner = c:GAL
									set_state_type = incorporated
								}
							}
						}
						# Slovenes to Slovenia
						if = {
							limit = {
								has_pop_culture = slovene
							}
							if = {
								limit = {
									NOT = {
										exists = c:SLO
									}
								}
								create_country = {
									tag = SLO
									origin = C:TUR
									state = prev
								}
							}
							else = {
								prev = {
									set_state_owner = c:SLO
									set_state_type = incorporated
								}
							}
						}
						# Romanians to Wallachia
						if = {
							limit = {
								has_pop_culture = romanian
							}
							if = {
								limit = {
									NOT = {
										exists = c:WAL
									}
								}
								create_country = {
									tag = WAL
									origin = C:TUR
									state = prev
								}
							}
							else = {
								prev = {
									set_state_owner = c:WAL
									set_state_type = incorporated
								}
							}
						}
						# Croatians to Croatia
						if = {
							limit = {
								has_pop_culture = croat
							}
							if = {
								limit = {
									NOT = {
										exists = c:CRO
									}
								}
								create_country = {
									tag = CRO
									origin = C:TUR
									state = prev
								}
							}
							else = {
								prev = {
									set_state_owner = c:CRO
									set_state_type = incorporated
								}
							}
						}
						# Bosnians to Bosnia
						if = {
							limit = {
								has_pop_culture = bosniak
							}
							if = {
								limit = {
									NOT = {
										exists = c:BOS
									}
								}
								create_country = {
									tag = BOS
									origin = C:TUR
									state = prev
								}
							}
							else = {
								prev = {
									set_state_owner = c:BOS
									set_state_type = incorporated
								}
							}
						}
						# Serbians to Serbia
						if = {
							limit = {
								has_pop_culture = serb
							}
							if = {
								limit = {
									NOT = {
										exists = c:SER
									}
								}
								create_country = {
									tag = SER
									origin = C:TUR
									state = prev
								}
							}
							else = {
								prev = {
									set_state_owner = c:SER
									set_state_type = incorporated
								}
							}
						}
						# Albanians to Albania
						if = {
							limit = {
								has_pop_culture = albanian
							}
							if = {
								limit = {
									NOT = {
										exists = c:ALB
									}
								}
								create_country = {
									tag = ALB
									origin = C:TUR
									state = prev
								}
							}
							else = {
								prev = {
									set_state_owner = c:ALB
									set_state_type = incorporated
								}
							}
						}
						# Bulgarians to Bulgaria
						if = {
							limit = {
								has_pop_culture = bulgarian
							}
							if = {
								limit = {
									NOT = {
										exists = c:BUL
									}
								}
								create_country = {
									tag = BUL
									origin = C:TUR
									state = prev
								}
							}
							else = {
								prev = {
									set_state_owner = c:BUL
									set_state_type = incorporated
								}
							}
						}
						# Greeks to Greece
						if = {
							limit = {
								has_pop_culture = greek
							}
							if = {
								limit = {
									NOT = {
										exists = c:GRE
									}
								}
								create_country = {
									tag = GRE
									origin = C:TUR
									state = prev
								}
							}
							else = {
								prev = {
									set_state_owner = c:GRE
									set_state_type = incorporated
								}
							}
						}
					}
				}
			}
		}
	}
}
